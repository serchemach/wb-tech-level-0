services:
  service:
    build: .
    ports: 
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile    
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 2s
      timeout: 5s
      retries: 10

  kafka:
    hostname: kafka
    image: bitnami/kafka:latest
    volumes:
      - "./kafka/run-init-kafka-topics.sh:/docker-entrypoint-initdb.d/run-init-kafka-topics.sh:ro"
      # - "./kafka/init-kafka-topics.sh:/docker-entrypoint-initdb.d/init-kafka-topics.shhh:ro"
    ports:
      - 9092:9092
    environment:
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      # accursed KRaft stuff 
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Misc
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true



volumes:
  pgdata:
